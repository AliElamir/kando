//////////////////////////////////////////////////////////////////////////////////////////
//   _  _ ____ _  _ ___  ____                                                           //
//   |_/  |__| |\ | |  \ |  |    This file belongs to Kando, the cross-platform         //
//   | \_ |  | | \| |__/ |__|    pie menu. Read more on github.com/kando-menu/kando     //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////

// SPDX-FileCopyrightText: Simon Schneegans <code@simonschneegans.de>
// SPDX-License-Identifier: MIT

@import './variables.scss';

#kando-menu {
  transition: opacity 150ms ease;

  // When the menu is hidden or shown, we fade it to / from transparent.
  &.hidden {
    opacity: 0;

    // Subtly scale in / out all items when the menu is shown and hidden.
    .icon-container {
      transform: scale(0.8) !important;
    }

    // Only the selected leaf node is scaled up to show that it has been selected. We also
    // want to delay the transition of the selected leaf node to leave time for the
    // position transition.
    &.selected .menu-node.active:not(:has(.menu-node)) > .menu-item {
      transform: scale(1) !important;
      transition-delay: 100ms;
    }

    // We also want to delay the fade-out animation if a node is selected. Else the
    // selected node would disappear before the position transition is finished.
    &.selected {
      transition-delay: 150ms;
    }
  }

  // The menu consists of a tree of items. Their relative positions are computed in
  // JavaScript and then applied as inline styles. Each node has an additional div as
  // child with the class icon-container. This div is used to display the node's content.
  .menu-node {
    transition: $menu-transition;
    position: absolute;
    pointer-events: none;

    .menu-item {
      position: absolute;
      border-radius: 50%;
      transition: $menu-transition;
      border: 1px solid $border-color;

      .icon-container {
        transition: $menu-transition;

        opacity: 0;
        color: $text-color;

        container-type: size;
        width: 100%;
        aspect-ratio: 1 / 1;

        // Circle clipping.
        clip-path: circle(45% at 50% 50%);
        white-space: nowrap;

        display: flex;
        align-items: center;
        justify-content: center;

        i {
          font-size: 75cqi;
          font-style: normal;
        }

        img {
          width: 100%;
          height: 100%;
          object-fit: contain;
        }
      }
    }

    // The active menu node is currently displayed in the center of the menu.
    &.active > .menu-item {
      top: calc(-1 * $root-size / 2);
      left: calc(-1 * $root-size / 2);
      width: $root-size;
      height: $root-size;
      background-color: $item-color;
      box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
      transform: scale(0.9);

      & > .icon-container {
        opacity: 1;
        font-size: calc($root-size * 0.75);
      }
    }

    // If the center node is hovered, we want to highlight it.
    &.active.hovered > .menu-item {
      background-color: $hovered-item-color;
    }

    // If the center node is clicked, we scale it down a bit.
    &.active.dragged > .menu-item {
      transform: scale(0.8);
    }

    // If there is a hovered child node, we scale up the center a bit and hide its icon.
    &.active:has(> .menu-node.hovered) > .menu-item {
      transform: scale(1);

      & > .icon-container {
        opacity: 0;
      }
    }

    // Child items are displayed around the active node. The parent node of the active
    // node is displayed in a similar style.
    &.parent > .menu-item,
    &.child > .menu-item {
      top: calc(-1 * $child-size / 2);
      left: calc(-1 * $child-size / 2);
      width: $child-size;
      height: $child-size;
      background-color: $item-color;
      box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
      transform: scale(1);

      & > .icon-container {
        opacity: 1;
        font-size: calc($child-size * 0.75);
      }
    }

    // Hovered child or parent items are highlighted.
    &.parent.hovered > .menu-item,
    &.child.hovered > .menu-item {
      transform: scale(1.1);
      background-color: $hovered-item-color;
    }

    // If dragged around, child or parent items are scaled back to normal again.
    &.parent.dragged > .menu-item,
    &.child.dragged > .menu-item {
      transform: scale(1);
    }

    // We disable any transition for dragged items.
    &.dragged {
      transition: none;
    }

    // Grandchild items are very small and drawn below the child items.
    &.grandchild > .menu-item {
      top: calc(-1 * $grandchild-size / 2);
      left: calc(-1 * $grandchild-size / 2);
      width: $grandchild-size;
      height: $grandchild-size;
      background-color: $border-color;
    }

    // Hide deeper levels than grandchildren.
    &.grandchild > .menu-node {
      display: none;
    }
  }

  // Connectors --------------------------------------------------------------------------

  // The connectors between the menu items are drawn as divs with a fixed height. Their
  // width and rotation is computed in JavaScript and then applied as inline styles.
  .connector {
    transition: $menu-transition;
    position: absolute;
    width: 0px;
    height: $connector-size;
    background-color: $connector-color;
    left: 0;
    top: calc(-1 * $connector-size / 2);
    transform-origin: 0% 50%;
    z-index: -1;
    display: none;
  }

  .menu-node.parent > .connector,
  .menu-node.active > .connector,
  .menu-node.active:has(> .menu-node.dragged) > .connector {
    display: block;
  }

  .menu-node.hovered > .connector {
    background-color: $connector-color-hover;
  }

  .menu-node.active > .connector {
    background-color: $connector-color-active;
  }

  .menu-node.active:has(> .menu-node.dragged) > .connector {
    transition: none;
  }

  // Center Text -------------------------------------------------------------------------

  // The text in the center of the menu is wrapped in a square div with a 10% padding.
  .center-text {
    position: absolute;
    color: $text-color;
    transition: $text-opacity-transition;

    text-align: center;
    font-size: 16px;
    line-height: 22px;

    overflow: hidden;
    word-break: break-word;

    &.hidden {
      opacity: 0;
    }
  }
}
